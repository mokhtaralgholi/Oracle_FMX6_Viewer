package info.phosco.forms.translate.element.trigger;

public enum TriggerType {

	USER_NAMED(0xFFFFFFFF),

	KEY_CLRBLK(0x0),
	KEY_CLRFRM(0x1),
	KEY_CLRREC(0x2),
	KEY_COMMIT(0x3),
	KEY_CQUERY(0x4),
	KEY_CREREC(0x5),
	KEY_DELREC(0x6),
	KEY_DOWN(0x7),
	KEY_DUP_ITEM(0x8),
	KEY_DUPREC(0x9),
	KEY_EDIT(0xa),
	KEY_ENTER(0xb),
	KEY_ENTQRY(0xc),
	KEY_EXEQRY(0xd),
	KEY_EXIT(0xe),
	KEY_F0(0xf),
	KEY_F1(0x10),
	KEY_F2(0x11),
	KEY_F3(0x12),
	KEY_F4(0x13),
	KEY_F5(0x14),
	KEY_F6(0x15),
	KEY_F7(0x16),
	KEY_F8(0x17),
	KEY_F9(0x18),
	KEY_HELP(0x19),
	KEY_LISTVAL(0x1a),
	KEY_MENU(0x1b),
	KEY_NEXT_ITEM(0x1c),
	KEY_NXTBLK(0x1d),
	KEY_NXTKEY(0x1e),
	KEY_NXTREC(0x1f),
	KEY_NXTSET(0x20),
	KEY_OTHERS(0x21),
	KEY_PREV_ITEM(0x22),
	KEY_PRINT(0x23),
	KEY_PRVBLK(0x24),
	KEY_PRVREC(0x25),
	KEY_SCRDOWN(0x26),
	KEY_SCRUP(0x27),
	KEY_UP(0x28),
	KEY_UPDREC(0x29),

	ON_CHECK_DELETE_MASTER(0x6f),
	ON_CHECK_UNIQUE(0x2a),
	ON_CLEAR_DETAILS(0x2b),
	ON_CLOSE(0x2c),
	ON_COLUMN_SECURITY(0x2d),
	ON_COMMIT(0x2e),
	ON_COUNT(0x2f),
	ON_DELETE(0x30),
	ON_DISPATCH_EVENT(0x81),
	ON_ERROR(0x31),
	ON_FETCH(0x32),
	ON_INSERT(0x33),
	ON_LOCK(0x34),
	ON_LOGON(0x35),
	ON_LOGOUT(0x36),
	ON_MESSAGE(0x37),
	ON_POPULATE_DETAILS(0x38),
	ON_ROLLBACK(0x39),
	ON_SAVEPOINT(0x3a),
	ON_SELECT(0x3b),
	ON_SEQUENCE_NUMBER(0x3c),
	ON_UPDATE(0x3d),

	POST_BLOCK(0x3e),
	POST_CHANGE(0x3f),
	POST_DATABASE_COMMIT(0x40),
	POST_DELETE(0x41),
	POST_FORM(0x43),
	POST_FORMS_COMMIT(0x44),
	POST_INSERT(0x45),
	POST_LOGON(0x46),
	POST_LOGOUT(0x47),
	POST_QUERY(0x48),
	POST_RECORD(0x49),
	POST_SELECT(0x4a),
	POST_TEXT_ITEM(0x4b),
	POST_UPDATE(0x4c),

	PRE_BLOCK(0x4d),
	PRE_COMMIT(0x4e),
	PRE_DELETE(0x4f),
	PRE_FORM(0x51),
	PRE_INSERT(0x52),
	PRE_LOGON(0x53),
	PRE_LOGOUT(0x54),
	PRE_POPUP_MENU(0x80),
	PRE_QUERY(0x55),
	PRE_RECORD(0x56),
	PRE_SELECT(0x57),
	PRE_TEXT_ITEM(0x58),
	PRE_UPDATE(0x59),

	WHEN_BUTTON_PRESSED(0x5a),
	WHEN_CHECKBOX_CHANGED(0x5b),
	WHEN_CLEAR_BLOCK(0x5c),
	WHEN_CREATE_RECORD(0x66),
	WHEN_CUSTOM_ITEM_EVENT(0x42),
	WHEN_DATABASE_RECORD(0x5e),
	WHEN_FORM_NAVIGATE(0x7a),
	WHEN_IMAGE_ACTIVATED(0x60),
	WHEN_IMAGE_PRESSED(0x61),
	WHEN_LIST_ACTIVATED(0x5f),
	WHEN_LIST_CHANGED(0x62),
	WHEN_MOUSE_CLICK(0x6a),
	WHEN_MOUSE_DOUBLECLICK(0x6b),
	WHEN_MOUSE_DOWN(0x50),
	WHEN_MOUSE_ENTER(0x74),
	WHEN_MOUSE_LEAVE(0x75),
	WHEN_MOUSE_MOVE(0x76),
	WHEN_MOUSE_UP(0x5d),
	WHEN_NEW_BLOCK_INSTANCE(0x63),
	WHEN_NEW_FORM_INSTANCE(0x64),
	WHEN_NEW_ITEM_INSTANCE(0x65),
	WHEN_NEW_RECORD_INSTANCE(0x67),
	WHEN_RADIO_CHANGED(0x68),
	WHEN_REMOVE_RECORD(0x69),
	WHEN_TAB_PAGE_CHANGED(0x77),
	WHEN_TIMER_EXPIRED(0x6c),
	WHEN_TREE_NODE_ACTIVATED(0x85),
	WHEN_TREE_NODE_EXPANDED(0x83),
	WHEN_TREE_NODE_SELECTED(0x84),
	WHEN_VALIDATE_ITEM(0x6e),
	WHEN_VALIDATE_RECORD(0x6d),
	WHEN_WINDOW_ACTIVATED(0x71),
	WHEN_WINDOW_CLOSED(0x70),
	WHEN_WINDOW_DEACTIVATED(0x72),
	WHEN_WINDOW_RESIZED(0x73);

	private final int type;

	private TriggerType(int type) {
		this.type = type;
	}

	public static TriggerType lookup(int type) {
		if (type < 0) {
			return TriggerType.USER_NAMED;
		}
		for (TriggerType t : TriggerType.values()) {
			if (t.type == type) {
				return t;
			}
		}
	//	throw new IllegalArgumentException("Unknown TriggerType 0x" + Integer.toHexString(type));
return TriggerType.WHEN_WINDOW_DEACTIVATED;
	}

	public String getOracleName() {
		return name().replace("_", "-");
	}

}
